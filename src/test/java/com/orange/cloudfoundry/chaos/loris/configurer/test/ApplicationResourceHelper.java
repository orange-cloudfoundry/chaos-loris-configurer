/**
 * Copyright (C) 2016 Orange
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.orange.cloudfoundry.chaos.loris.configurer.test;

import com.orange.cloudfoundry.chaos.loris.configurer.data.loris.Application;
import lombok.Builder;
import org.springframework.hateoas.Link;
import org.springframework.hateoas.PagedResources;

import java.util.ArrayList;
import java.util.Collection;
import java.util.UUID;

/**
 * @author O. Orand
 */
@Builder
public class ApplicationResourceHelper {


    private String lorisUrl;
    private long appId;
    private long chaosId;

    public static class ApplicationResourceHelperBuilder {
        private long appId = 0;
        private long chaosId = 0;
        private String appGuid = UUID.randomUUID().toString();
        private String lorisUrl = Commons.BASE_URL;
    }

    public Application generateNextApplication() {
        Application app = new Application();
        app.add(new Link(lorisUrl + "/applications/" + ++appId, "self"));
        app.add(new Link(lorisUrl + "/chaoses/" + ++chaosId, "chaos"));
        app.setApplicationId(UUID.randomUUID().toString());
        return app;
    }


    public PagedResources<Application> generateApplicationPagedResource(int pageCount, int totalPages, int pageSize) {
        Collection<Application> autoGeneratedApps = new ArrayList<>();
        PagedResources.PageMetadata pageMetadata;
        String applicationBaseUrl = lorisUrl+"/applications";
        final Link appLink = new Link(applicationBaseUrl, "self");

        final Link firstLink = new Link(applicationBaseUrl + "?page=0&size=" + pageSize, "first");
        final Link lastLink = new Link(applicationBaseUrl + "?page=" + (totalPages - 1) + "&size=" + pageSize, "last");
        Link nextLink;
        Link prevLink;

        for (int i = 0; i < pageSize; i++) {
            Application aChaos = ApplicationResourceHelper.builder().build().generateNextApplication();
            autoGeneratedApps.add(aChaos);
        }

        pageMetadata = new PagedResources.PageMetadata(pageSize, pageCount, pageSize * totalPages, totalPages);
        nextLink = new Link(applicationBaseUrl + "?page=" + (pageCount + 1) + "&size=" + pageSize, "next");
        prevLink = new Link(applicationBaseUrl + "?page=" + (pageCount - 1) + "&size=" + pageSize, "prev");

        boolean isFirstPage = pageCount == 0;
        boolean isLastPage = pageCount == totalPages - 1;
        boolean emptyPage = totalPages == 0;
        if (emptyPage){
            Collection<Application> emptyContent = new ArrayList<>();
            PagedResources<Application> emptyResources = new PagedResources<>(emptyContent, pageMetadata, appLink);
            return emptyResources;

        } else if (isFirstPage) {
            PagedResources<Application> firstPage = new PagedResources<>(autoGeneratedApps, pageMetadata, appLink, firstLink, lastLink, nextLink);
            return firstPage;
        } else if (isLastPage) {
            PagedResources<Application> lastPage = new PagedResources<>(autoGeneratedApps, pageMetadata, appLink, firstLink, lastLink, prevLink);
            return lastPage;

        } else {
            PagedResources<Application> middlePage = new PagedResources<>(autoGeneratedApps, pageMetadata, appLink, firstLink, lastLink, prevLink, nextLink);
            return middlePage;
        }
    }

}
